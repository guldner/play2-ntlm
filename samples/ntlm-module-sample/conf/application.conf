# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret=":=0gwfKy?j]`<1]HS^0jtcC^wPLTkuQS9Ho5Q3e]1Vp@]m2@4ABv8gUl4^LRXItA"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router 
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point. 
# Furthermore, it's assumed your route file is named properly. 
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=DEBUG

# Logger provided to your application:
logger.application=TRACE
logger.waffle.servlet=TRACE
logger.waffle=TRACE


# ntlmmodule configuration
# ~~~~~
# What challenge to use. Options are Negotiate and NTLM. Default is Negotiate.
#ntlmmodule.challenge = Negotiate 
# Session key to store ntlm userid. Default is 'ntlmuser'
#ntlmmodule.session.key = ntlmuser
# Shall the userid be encrypted? Default is false
#ntlmmodule.encrypt.userid = false
# Do you care about user's groups? Default is true. Groups are stored in Cache, as there could be too many to fit in the session cookie. You should store them somewhere else and remove them from Cache.
#ntlmmodule.savegroups = true
# Do you only care about some groups? List them here, comma/newline-separated. Will match groups whose fully qualified name ends in any of the given values
ntlmmodule.relevantgroups = [
	Administrators
	"\\Users" #Including the backslash to avoid other groups ending in 'Users' such as "NT AUTHORITY\Authenticated Users". Note: Backslash must be escaped and the value in quotes.
	"CORP\\IT_Development" #Fully qualified name of group.
]
# URIs that does NOT demand NTLM authentication. Default is 'None' 
ntlmmodule.unprotected.uris = [
	/hello
	/logout
]
# URIs that demand NTLM authentication. Default is 'All' 
#ntlmmodule.protected.uris = [
#	/
#	/removegroups
#]
#Protect assets? Default is false
#ntlmmodule.protect.assets = false
# Where to go after successful authentication? Default is originally requested uri
ntlmmodule.post.auth.redirect.uri = /hello
# Logging level
logger.ntlmmodule=TRACE
